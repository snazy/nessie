# -- The number of replicas to deploy (horizontal scaling).
# Beware that replicas are stateless; don't set this number > 1 when using INMEMORY or ROCKS version store types.
replicaCount: 1

image:
  # -- The image repository to pull from.
  repository: ghcr.io/projectnessie/nessie
  # -- The image pull policy.
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart version.
  tag: ""

# -- The default logging level for the nessie server.
logLevel: INFO

# -- Which type of version store to use: IN_MEMORY, ROCKSDB, DYNAMODB, MONGODB, CASSANDRA, JDBC.
# (Legacy version store types are: INMEMORY, ROCKS, DYNAMO, MONGO, TRANSACTIONAL. If you are using
# one of these legacy version store types, migrate your existing repositories to the new version
# store types using the nessie-quarkus-cli tool's export/import functionality.)
versionStoreType: IN_MEMORY

cassandra:
  keyspace: nessie
  contactPoints:
  localDatacenter:
  auth:
    {}
    # username:
    # password:

# RocksDB settings. Only required when using ROCKS version store type; ignored otherwise.
rocksdb:
  # -- The storage class name of the persistent volume claim to create.
  storageClassName: standard
  # -- The size of the persistent volume claim to create.
  storageSize: 1Gi
  # -- Labels to add to the persistent volume claim spec selector; a persistent volume with matching labels must exist.
  # Leave empty if using dynamic provisioning.
  selectorLabels:
    {}
    # app.kubernetes.io/name: nessie
    # app.kubernetes.io/instance: RELEASE-NAME

# DynamoDB settings. Only required when using DYNAMO version store type; ignored otherwise.
dynamodb:
  # -- The AWS region to use.
  region: us-west-2
  secret:
    # -- The secret name to pull AWS credentials from.
    name: awscreds
    # -- The secret key storing the AWS secret key id.
    awsAccessKeyId: aws_access_key_id
    # -- The secret key storing the AWS secret access key.
    awsSecretAccessKey: aws_secret_access_key

## Mongo DB settings. Only required when using MONGO version store type; ignored otherwise.
mongodb:
  # -- The MongoDB database name.
  name: nessie
  # -- The MongoDB connection string.
  connectionString: mongodb://localhost:27017
  secret:
    # -- The secret name to pull MongoDB credentials from.
    name: mongodb-creds
    # -- The secret key storing the MongoDB username.
    username: mongodb_username
    # -- The secret key storing the MongoDB password.
    password: mongodb_password

# Postgres settings. Only required when using TRANSACTIONAL version store type; ignored otherwise.
postgres:
  # -- The Postgres JDBC connection string.
  jdbcUrl: jdbc:postgresql://localhost:5432/my_database
  secret:
    # -- The secret name to pull Postgres credentials from.
    name: postgres-creds
    # -- The secret key storing the Postgres username.
    username: postgres_username
    # -- The secret key storing the Postgres password.
    password: postgres_password

# -- Advanced configuration.
# You can pass here any valid Nessie or Quarkus configuration property.
# Any property that is defined here takes precedence over all the other configuration values generated by this chart.
# Properties can be passed "flattened" or as nested YAML objects (see examples below).
advancedConfig:
  {}
#  nessie.server.default-branch: my-branch
#  nessie.version.store.persist.cache-capacity-mb: 64
#  nessie.version.store.persist.repository-id: my-repository
#  quarkus:
#    log:
#      console.format: "%d{HH:mm:ss} %s%e%n"
#      category."org.projectnessie".level: DEBUG

# -- Advanced configuration via Environment Variables.
# Extra environment variables to add to the Nessie server container.
# You can pass here any valid EnvVar object:
# https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#envvar-v1-core
# This can be useful to get configuration values from Kubernetes secrets or config maps.
extraEnv:
  []
#  - name: QUARKUS_MONGODB_APPLICATION_NAME
#    value: my-app
#  - name: QUARKUS_MONGODB_TLS
#    valueFrom:
#      configMapKeyRef:
#        name: mongodb-config
#        key: tls

authentication:
  # -- Specifies whether authentication for the nessie server should be enabled.
  enabled: false
  # -- Sets the base URL of the OpenID Connect (OIDC) server. Needs to be overridden with authentication.enabled=true
  oidcAuthServerUrl: http://127.255.0.0:0/auth/realms/unset/
  # -- Set the OIDC client ID when authentication.enabled=true. Each application has a client ID that is used to identify the application
  oidcClientId: nessie

authorization:
  # -- Specifies whether authorization for the nessie server should be enabled.
  enabled: false
  # -- The authorization rules when authorization.enabled=true. Example rules can be found at https://projectnessie.org/features/metadata_authorization/#authorization-rules
  rules:
    {}
    # allowViewingBranch: op=='VIEW_REFERENCE' && role.startsWith('test_user') && ref.startsWith('allowedBranch')
    # allowCommits: op=='COMMIT_CHANGE_AGAINST_REFERENCE' && role.startsWith('test_user') && ref.startsWith('allowedBranch')

tracing:
  # -- Specifies whether tracing for the nessie server should be enabled.
  enabled: false
  # -- The collector endpoint URL to connect to (required).
  # The endpoint URL must have either the http:// or the https:// scheme.
  # The collector must talk the OpenTelemetry protocol (OTLP) and the port must be its gRPC port (by default 4317).
  # See https://quarkus.io/guides/opentelemetry for more information.
  endpoint: "http://otlp-collector:4317"
  # -- Which requests should be sampled. Valid values are: "all", "none", or a ratio between 0.0 and
  # "1.0d" (inclusive). E.g. "0.5d" means that 50% of the requests will be sampled.
  sample: "1.0d"
  # -- Resource attributes to identify the nessie service among other tracing sources.
  # See https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/#service.
  # If left empty, traces will be attached to a service named "Nessie"; to change this, provide a service.name attribute here.
  attributes:
    {}
    # service.name: my-nessie

serviceMonitor:
  # -- Specifies whether a ServiceMonitor for Prometheus operator should be created.
  enabled: true
  # -- The scrape interval; leave empty to let Prometheus decide. Must be a valid duration, e.g. 1d, 1h30m, 5m, 10s.
  interval: ""
  # -- Labels for the created ServiceMonitor so that Prometheus operator can properly pick it up.
  labels:
    {}
    # release: prometheus

serviceAccount:
  # -- Specifies whether a service account should be created.
  create: true
  # -- Annotations to add to the service account.
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template.
  name: ""

# -- Annotations to apply to nessie pods.
podAnnotations: {}

# -- Security context for the nessie pod. See https://kubernetes.io/docs/tasks/configure-pod-container/security-context/.
podSecurityContext:
  {}
  # fsGroup: 2000

# -- Security context for the nessie container. See https://kubernetes.io/docs/tasks/configure-pod-container/security-context/.
securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# Nessie service settings.
service:
  # -- The type of service to create.
  type: ClusterIP
  # -- The port on which the service should listen.
  port: 19120
  # -- Annotations to add to the service.
  annotations: {}

ingress:
  # -- Specifies whether an ingress should be created.
  enabled: false
  # -- Annotations to add to the ingress.
  annotations: {}
  # -- A list of host paths used to configure the ingress.
  hosts:
    - host: chart-example.local
      paths: []
  # -- A list of TLS certificates; each entry has a list of hosts in the certificate,
  # along with the secret name used to terminate TLS traffic on port 443.
  tls: []
#    - hosts:
#        - chart-example1.local
#        - chart-example2.local
#      secretName: secret1

# -- Configures the resources requests and limits for nessie pods.
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
resources:
  {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  # -- Specifies whether automatic horizontal scaling should be enabled.
  # Do not enable this when using ROCKS version store type.
  enabled: false
  # -- The minimum number of replicas to maintain.
  minReplicas: 1
  # -- The maximum number of replicas to maintain.
  maxReplicas: 3
  # -- Optional; set to zero or empty to disable.
  targetCPUUtilizationPercentage: 80
  # -- Optional; set to zero or empty to disable.
  targetMemoryUtilizationPercentage:

# -- Node labels which must match for the nessie pod to be scheduled on that node. See https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector.
nodeSelector:
  {}
  # kubernetes.io/os: linux

# -- A list of tolerations to apply to nessie pods. See https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/.
tolerations: []
#  - key: "node-role.kubernetes.io/control-plane"
#    operator: "Exists"
#    effect: "NoSchedule"

# -- Affinity and anti-affinity for nessie pods. See https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity.
affinity: {}
#  podAffinity:
#    preferredDuringSchedulingIgnoredDuringExecution:
#      - weight: 100
#        podAffinityTerm:
#          topologyKey: kubernetes.io/hostname
#          labelSelector:
#            matchExpressions:
#              - key: app.kubernetes.io/name
#                operator: In
#                values:
#                  - nessie
