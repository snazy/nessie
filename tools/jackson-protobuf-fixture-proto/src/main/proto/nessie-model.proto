/*
 * Copyright (C) 2020 Dremio
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package nessie.model;

option java_package = "org.projectnessie.model.proto";
option java_outer_classname = "NessieModelTypes";
option java_generate_equals_and_hash = true;
option java_multiple_files = true;


import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";

extend google.protobuf.FieldOptions {
  optional string jackson_type_id = 80000;
}

message Empty {}

message CommitMeta {
  optional string hash = 1;
  optional string committer = 2;
  optional string author = 3;
  optional string signedOffBy = 4;
  string message = 5;
  optional google.protobuf.Timestamp commitTime = 6;
  optional google.protobuf.Timestamp authorTime = 7;
  map<string, string> properties = 8;
  repeated string parentHashes = 9;
  repeated string authors = 10;
  repeated string allSignedOffBy = 11;
  map<string, StringList> allProperties = 12;
}

message StringList {
  repeated string value = 1;
}

message Reference {
  oneof type {
    Branch branch = 1 [ (jackson_type_id) = "BRANCH" ];
    Tag tag = 2 [ (jackson_type_id) = "TAG" ];
    Detached detached = 3 [ (jackson_type_id) = "DETACHED" ];
  }
}

message Branch {
  string name = 1;
  optional string hash = 2;
  optional ReferenceMetadata metadata = 3;
}

message Tag {
  string name = 1;
  optional string hash = 2;
  optional ReferenceMetadata metadata = 3;
}

message Detached {
  optional string hash = 2;
  optional ReferenceMetadata metadata = 3;
}

message ReferenceMetadata {
  optional int32 numCommitsAhead = 1;
  optional int32 numCommitsBehind = 2;
  optional CommitMeta commitMetaOfHEAD = 3;
  optional string commonAncestorHash = 4;
  optional int64 numTotalCommits = 5;
}

message NessieConfiguration {
  optional string default_branch = 1;
  int32 maxSupportedApiVersion = 2;
  optional int32 minSupportedApiVersion = 3;
  optional string specVersion = 4;
  optional string noAncestorHash = 5;
  optional google.protobuf.Timestamp repositoryCreationTimestamp = 6;
  optional google.protobuf.Timestamp oldestPossibleCommitTimestamp = 7;
  map<string, string> additionalProperties = 8;
  optional int32 actualApiVersion = 9;
}

message RepositoryConfigRequest {
  repeated string typeName = 1;
}

message RepositoryConfigResponse {
  // Note: Repository Config JSON representation is controlled by deployable type bundles.
  repeated string configJson = 1;
}

message UpdateRepositoryConfigRequest {
  string configJson = 1;
}

message UpdateRepositoryConfigResponse {
  optional string previousConfigJson = 1;
}

message ContentRequest {
  ContentKey contentKey = 1;
  string ref = 2;
  string hashOnRef = 3;
}

message MultipleContentsRequest {
  string ref = 1;
  string hashOnRef = 2;
  repeated ContentKey requestedKeys = 3;
}

message MultipleContentsResponse {
  repeated ContentWithKey contentWithKey = 1;
  optional Reference effectiveReference = 2;
}

message Content {
  oneof type {
    IcebergTable iceberg = 1;
    DeltaLakeTable deltaLake = 2;
    IcebergView iceberg_view = 3;
    Namespace namespace = 4;
  }
}

message ContentKey {
  repeated string elements = 1;
}

message ContentWithKey {
  ContentKey contentKey = 1;
  Content content = 2;
}

message IcebergTable {
  string id = 1;
  string metadataLocation = 2;
  int64 snapshotId = 3;
  int32 schemaId = 4;
  int32 specId = 5;
  int32 sortOrderId = 6;
}

message IcebergView {
  string id = 1;
  string metadataLocation = 2;
  int64 versionId = 3;
  int32 schemaId = 4;
  string dialect = 5;
  string sqlText = 6;
}

message DeltaLakeTable {
  string id = 1;
  repeated string metadataLocationHistory = 2;
  repeated string checkpointLocationHistory = 3;
  optional string lastCheckpoint = 4;
}

message Namespace {
  repeated string elements = 1;
  map<string, string> properties = 2;
  string id = 3;
}

message DiffRequest {
  string fromRefName = 1;
  string toRefName = 2;
  optional string fromHashOnRef = 3;
  optional string toHashOnRef = 4;
  optional int32 maxRecords = 5;
  optional string pageToken = 6;
  optional ContentKey minKey = 7;
  optional ContentKey maxKey = 8;
  optional ContentKey prefixKey = 9;
  optional string filter = 10;
  repeated ContentKey keys = 11;
}

message DiffResponse {
  repeated DiffEntry diffs = 1;
  optional Reference effectiveFromRef = 2;
  optional Reference effectiveToRef = 3;
  bool hasMore = 4;
  optional string pageToken = 5;
}

message DiffEntry {
  ContentKey key = 1;
  optional Content from = 2;
  optional Content to = 3;
}

enum ReferenceType {
  BRANCH = 0;
  TAG = 1;
}

message CreateReferenceRequest {
  string sourceRefName = 1;
  Reference reference = 2;
}

message GetAllReferencesRequest {
  optional int32 maxRecords = 1;
  optional string pageToken = 2;
  optional FetchOption fetchOption = 3;
  optional string filter = 4;
}

message GetAllReferencesResponse {
  repeated Reference reference = 1;
  bool hasMore = 2;
  optional string pageToken = 3;
}

message GetReferenceByNameRequest {
  string namedRef = 1;
  optional FetchOption fetchOption = 3;
}

message AssignReferenceRequest {
  string namedRef = 1;
  string oldHash = 2;
  oneof assignTo {
    Branch branch = 3;
    Tag tag = 4;
    Detached detached = 5;
  }
  optional ReferenceType reference_type = 6;
}

message ReferenceResponse {
  optional Reference reference = 1;
}

message DeleteReferenceRequest {
  string namedRef = 1;
  string hash = 2;
  optional ReferenceType reference_type = 6;
}

message CommitLogRequest {
  string namedRef = 1;
  optional string startHash = 2;
  optional string endHash = 3;
  optional int32 maxRecords = 4;
  optional string pageToken = 5;
  optional string filter = 6;
  optional FetchOption fetchOption = 7;
}

message CommitLogResponse {
  repeated CommitLogEntry logEntries = 1;
  bool hasMore = 2;
  optional string token = 3;
}

message MergeResponse {
  bool wasApplied = 1;
  bool wasSuccessful = 2;
  string targetBranchName = 3;
  string effectiveTargetHash = 4;
  optional string expectedHash = 5;
  optional string resultantTargetHash = 6;
  optional string commonAncestorHash = 7;
  repeated CommitLogEntry sourceCommits = 8;
  optional CommitLogEntries targetCommits = 9; // using sub-message to properly support null target commit lists
  repeated ContentKeyDetails details = 10;
}

message CommitLogEntries {
  repeated CommitLogEntry entries = 1;
}

message ContentKeyDetails {
  ContentKey contentKey = 1;
  MergeBehavior mergeBehavior = 2;
  ContentKeyConflict conflictType = 3;
  repeated string sourceCommitHashes = 4;
  repeated string targetCommitHashes = 5;
  optional ContentKeyConflictDetails conflict = 6;
}

message ContentKeyConflictDetails {
  string conflictType = 1; // the canonical enum for this value is the OSS ConflictType java class
  ContentKey key = 2;
  string message = 3;
}

enum ContentKeyConflict {
  NONE = 0;
  UNRESOLVABLE = 1;
}

enum MergeBehavior {
  NORMAL = 0;
  FORCE = 1;
  DROP = 2;
}

message CommitLogEntry {
  CommitMeta commitMeta = 1;
  optional string parentCommitHash = 2;
  repeated CommitOperation operations = 3;
}

message EntriesRequest {
  string namedRef = 1;
  optional string hashOnRef = 2;
  optional int32 maxRecords = 3;
  optional string pageToken = 4;
  optional string filter = 5;
  optional int32 namespaceDepth = 6;
  optional bool withContent = 7;
  optional ContentKey minKey = 8;
  optional ContentKey maxKey = 9;
  optional ContentKey prefixKey = 10;
  repeated ContentKey keys = 11;
}

message EntriesResponse {
  repeated Entry entries = 1;
  bool hasMore = 2;
  optional string token = 3;
  optional Reference effectiveReference = 4;
}

message ReferenceHistoryRequest {
  string namedRef = 1;
  optional int32 headCommitsToScan = 2;
}

message ReferenceHistoryResponse {
  Reference reference = 1;
  ReferenceHistoryState current = 2;
  repeated ReferenceHistoryState previous = 3;
  CommitConsistency commitLogConsistency = 4;
}

message ReferenceHistoryState {
  string commitHash = 1;
  CommitConsistency consistency = 2;
  optional CommitMeta commitMeta = 3;
}

message CommitConsistency {
  string value = 1; // Maps to Nessie OSS CommitConsistency enum names
}

enum ContentType {
  UNKNOWN = 0;
  ICEBERG_TABLE = 1;
  DELTA_LAKE_TABLE = 2;
  ICEBERG_VIEW = 3;
  NAMESPACE = 4;
}

message Entry {
  ContentType type = 1;
  ContentKey contentKey = 2;
  optional string contentId = 3;
  optional Content content = 4;
}

message TransplantRequest {
  string branchName = 1;
  optional string hash = 2;
  string message = 3;
  string fromRefName = 4;
  repeated string hashesToTransplant = 5;
  optional bool keepIndividualCommits = 6;
  optional bool dryRun = 7;
  optional bool returnConflictAsResult = 8;
  optional bool fetchAdditionalInfo = 9;
  optional MergeBehavior defaultKeyMergeMode = 10;
  repeated MergeKeyBehavior mergeModes = 11;
}

message MergeRequest {
  string fromHash = 1;
  string toBranch = 2;
  optional string expectedHash = 3;
  string fromRefName = 4;
  optional bool keepIndividualCommits = 5;
  optional bool dryRun = 7;
  optional bool returnConflictAsResult = 8;
  optional bool fetchAdditionalInfo = 9;
  optional MergeBehavior defaultKeyMergeMode = 10;
  repeated MergeKeyBehavior mergeModes = 11;
  optional string message = 12;
  optional CommitMeta commitMeta = 13;
}

message MergeKeyBehavior {
  ContentKey key = 1;
  MergeBehavior mergeBehavior = 2;
}

message CommitRequest {
  string branch = 1;
  string hash = 2;
  CommitOps commitOperations = 3;
}

message CommitResponse {
  reserved 1, 2, 3; // legacy fields: name, hash, metadata

  Branch branch = 4;
  repeated AddedContent addedContent = 5;
}

message AddedContent {
  ContentKey key = 1;
  string contentId = 2;
}

message CommitOps {
  CommitMeta commitMeta = 1;
  repeated CommitOperation operations = 2;
}

message CommitOperation {
  oneof type {
    Put put = 1;
    Delete delete = 2;
    Unchanged unchanged = 3;
  }
}

message Put {
  ContentKey key = 1;
  Content content = 2;
  optional Content expectedContent = 3;
}

message Delete {
  ContentKey key = 1;
}

message Unchanged {
  ContentKey key = 1;
}

enum FetchOption {
  MINIMAL = 0;
  ALL = 1;
}
