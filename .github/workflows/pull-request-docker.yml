# Copyright (C) 2020 Dremio
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# Projectnessie GitHub Pull-Request / Docker build and publishing

name: Docker images test

on:
  pull_request:
    types: [labeled, opened, synchronize, reopened]
  schedule:
    # Run daily on week days
    - cron:  '0 4 * * 1-5'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker-testing:
    name: Docker build and publishing
    runs-on: ubuntu-22.04
    env:
      WF_EXEC: ${{ (github.repository == 'projectnessie/nessie' && github.event_name != 'pull_request') || contains(github.event.pull_request.labels.*.name, 'pr-docker') }}
    steps:
      - name: Checkout
        if: env.WF_EXEC == 'true'
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0
      - name: Setup runner
        if: env.WF_EXEC == 'true'
        uses: ./.github/actions/setup-runner
        with:
          more-memory: 'true'
      - name: Setup Java, Gradle
        if: env.WF_EXEC == 'true'
        uses: ./.github/actions/dev-tool-java

      - name: Setup docker-registry
        if: env.WF_EXEC == 'true'
        run: |
          sudo apt-get install -y docker-registry apache2-utils 
          cat <<! > config.yml
          version: 0.1
          log:
            fields:
              service: registry
          storage:
            cache:
              blobdescriptor: inmemory
            filesystem:
              rootdirectory: /var/lib/docker-registry
            delete:
              enabled: true
          http:
            addr: 127.0.0.1:5000
            headers:
              X-Content-Type-Options: [nosniff]
          auth:
            htpasswd:
              realm: basic-realm
              path: /etc/docker/registry/htpasswd
          health:
            storagedriver:
              enabled: true
              interval: 10s
              threshold: 3
          !
          sudo mv config.yml /etc/docker/registry/config.yml
          sudo htpasswd -cBb /etc/docker/registry/htpasswd micky mouse 
          
          sudo service docker-registry restart
          
          echo mouse | docker login -u micky --password-stdin localhost:5000

          VERSION="$(cat version.txt)"
          DOCKER_VERSION="${VERSION%-SNAPSHOT}"
          echo "DOCKER_VERSION=${DOCKER_VERSION}" >> ${GITHUB_ENV}
          echo "DOCKER_IMAGE=localhost:5000/nessie-testing" >> ${GITHUB_ENV}

      - name: Gradle / prepare
        if: env.WF_EXEC == 'true'
        uses: gradle/gradle-build-action@v2
        with:
          cache-read-only: true
          # Just fetch cache, defer build to "later"
          arguments: projects

      - name: Docker images publishing
        if: env.WF_EXEC == 'true'
        env:
          ARTIFACTS: ../build-artifacts
        run: |
          rm -rf "${ARTIFACTS}"
          mkdir -p "${ARTIFACTS}"

          tools/dockerbuild/build-push-images.sh \
            -a "${ARTIFACTS}" \
            -g ":nessie-quarkus" \
            -p "servers/quarkus-server" \
            -n \
            ${DOCKER_IMAGE}
          rm -rf "${ARTIFACTS}"

      - name: Cleanup buildx
        if: env.WF_EXEC == 'true'
        run: |
          docker buildx use default
          docker buildx rm nessiebuild

      - name: Docker images exist test
        if: env.WF_EXEC == 'true'
        run: |
          docker pull ${DOCKER_IMAGE}:latest
          docker pull ${DOCKER_IMAGE}:latest-java
          docker pull ${DOCKER_IMAGE}:latest-native
          docker pull ${DOCKER_IMAGE}:${DOCKER_VERSION}
          docker pull ${DOCKER_IMAGE}:${DOCKER_VERSION}-native
          docker pull ${DOCKER_IMAGE}:${DOCKER_VERSION}-java
          cat <<! >> $GITHUB_STEP_SUMMARY
          ## Docker images
          
          \`\`\`
          $(docker images)
          \`\`\`
          !

      - name: Check if Docker native image works
        if: env.WF_EXEC == 'true'
        run: |
          docker run --detach --name nessie ${DOCKER_IMAGE}:latest-native
          echo "Let native Nessie Docker image run for one minute (to make sure it starts up fine)..."
          for i in {1..60}; do
            STATUS="$(docker container inspect nessie | jq -r '.[0].State.Status')"
            if [[ ${STATUS} != "running" ]] ; then
              echo "Nessie native Docker image stopped on its own ... a bug?" > /dev/stderr
              docker logs nessie
              cat <<! >> $GITHUB_STEP_SUMMARY
              ## Nessie native Docker image FAILED

              \`\`\`
              $(docker logs nessie)
              \`\`\`
          !
              exit 1
            fi
            sleep 1
          done
          echo "## Nessie native Docker image smoke test: PASSED" >> $GITHUB_STEP_SUMMARY  
          echo "Nessie native Docker image smoke test: PASSED"
          docker stop nessie
          docker rm nessie

      - name: Check if Docker Java image works
        if: env.WF_EXEC == 'true'
        run: |
          docker run --detach --name nessie ${DOCKER_IMAGE}:latest-java
          echo "Let Nessie Java Docker image run for one minute (to make sure it starts up fine)..."
          for i in {1..60}; do
            STATUS="$(docker container inspect nessie | jq -r '.[0].State.Status')"
            if [[ ${STATUS} != "running" ]] ; then
              echo "Nessie Java Docker image stopped on its own ... a bug?" > /dev/stderr
              docker logs nessie
              cat <<! >> $GITHUB_STEP_SUMMARY
              ## Nessie Java Docker image FAILED

              \`\`\`
              $(docker logs nessie)
              \`\`\`
          !
              exit 1
            fi
            sleep 1
          done
          echo "## Nessie Java Docker image smoke test: PASSED" >> $GITHUB_STEP_SUMMARY  
          echo "Nessie Java Docker image smoke test: PASSED"
          docker stop nessie
          docker rm nessie
