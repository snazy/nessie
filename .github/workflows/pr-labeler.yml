# Copyright (C) 2020 Dremio
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Auto Labeler

on:
  pull_request_target:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}
  cancel-in-progress: false

jobs:
  triage:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-22.04
    steps:
      - name: Collect PR relevant labels
        uses: actions/github-script@v6
        with:
          script: |
            const label_names = context.payload.pull_request.labels.map(label => label.name);
            console.info("Current PR labels: ", label_names);
            core.exportVariable('PREVIOUS_LABELS', JSON.stringify(label_names));

      - name: Label
        uses: actions/labeler@v4
        # Ignore auto-labeler errors as the tags are likely not present in Nessie forks
        continue-on-error: true

      - name: Maybe restart CI
        uses: actions/github-script@v6
        with:
          script: |
            const owner = context.payload.pull_request.base.repo.owner.login;
            const repo = context.payload.pull_request.base.repo.name;
            const pull_request_head = context.payload.pull_request.head.sha;
            const pull_number = context.payload.pull_request.number;
            console.info("Known PR ID: ", pull_number);
            console.info("Known PR HEAD: ", pull_request_head);

            let previous_label_names = JSON.parse(process.env.PREVIOUS_LABELS);
            let updated_label_names = context.payload.pull_request.labels.map(label => label.name);

            console.info("Previous label names: ", previous_label_names);
            console.info("Updated label names: ", updated_label_names);

            previous_label_names = previous_label_names.filter(label => label.startsWith("pr-"));
            updated_label_names = updated_label_names.filter(label => label.startsWith("pr-"));

            console.info("Previous relevant label names: ", previous_label_names);
            console.info("Updated relevant label names: ", updated_label_names);

            const labels_unchanged = JSON.stringify(previous_label_names) === JSON.stringify(updated_label_names);

            if (labels_unchanged) {
              console.info("Relevant labels were not changed.");
            } else {
              console.info("Relevant labels changed, re-requesting check suites...");

              const { data: check_suites } = await github.rest.checks.listSuitesForRef({
                owner: owner,
                repo: repo,
                ref: pull_request_head,
              });
  
              console.info("Number of check suites: ", check_suites.total_count);
              check_suites.check_suites.forEach(check_suite =>
                console.info("Known check suite: ", check_suite.id, " : ", check_suite.app.name)
              );
  
              const { values: reruns } = Promise.all(check_suites.check_suites.map(check_suite => {
                console.info("Re-requesting check suite: ", check_suite.id, " : ", check_suite.app.name)
                github.rest.checks.rerequestSuite({
                  owner: owner,
                  repo: repo,
                  check_suite_id: check_suite.id,
                })
              }).values());
              console.info("Done.");
            }
