name: Check Results Upload

# This workflow runs after a successful run of the "PR Build Check" and "Main CI" workflows.
# It generates HTML and YAML reports from the Gatling simulation-logs and publishes those via
# github pages. Since pushing contents to a different repo requires access to secrets, the
# GH-API contents-PUT cannot be performed from the "PR Build Check" workflow, which is triggered
# on 'pull_request' and therefore has no access to secrets.

# Required secrets:
#   CI_REPORTS_TOKEN    PAT that can write contents (commit) to the 'CI_REPORTS_REPO'
#                       requires: "repo", "read:org", "read:user", "read:email"

on:
  workflow_run:
    workflows: ["PR Build Check", "Main CI"]
    types:
        - completed

env:
  # Name of the jar in the nessie-ci S3 bucket
  GATLING_REPORT_JAR: gatling-report-5.1-nessie-1-capsule-fat.jar
  SIMULATION_LOG_DIR: perftest/simulations/target/gatling
  REPORT_DIR: perftest/simulations/target/gatling-report
  PUBLIC_BASE: https://projectnessie.org/nessie-ci
  CI_REPORTS_REPO: projectnessie/nessie-ci

jobs:

  # For main-branch pushes & PRs
  report-upload:
    name: Report Upload
    runs-on: ubuntu-latest
    if: ${{ github.repository == 'projectnessie/nessie' }}

    env:
      WEB_DIR: ${{ github.event.workflow_run.event }}/${{ github.event.workflow_run.head_branch }}/${{ github.event.workflow_run.head_sha }}/gatling
      REF_RUN_ID: ${{ github.event.workflow_run.id }}
      EVENT: ${{ github.event.workflow_run.event }}
      BRANCH: ${{ github.event.workflow_run.head_branch }}
      SHA: ${{ github.event.workflow_run.head_sha }}

    steps:
    # Check that the commit has passed CI.
    - name: Check commit status
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
        gh api repos/projectnessie/nessie/commits/${SHA}/check-runs --jq 'if ([.check_runs[] | select(.name | endswith(" release") or startswith("codecov/") or startswith("Report ") | not ) | .conclusion // "pending" ] | unique == ["success"]) then "OK" else error("Commit checks are not OK") end'

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Create simlog-dir
      run: mkdir -p ${SIMULATION_LOG_DIR}

    - name: Download gatling-report jar
      run: |
        # Jar built from https://github.com/snazy/gatling-report/tree/gatling-3.5-rebased @ b3806d1f0cb6e9f6806fa7ade1fd57d7e383387d
        curl -s -o ${GATLING_REPORT_JAR} ${PUBLIC_BASE}/lib/${GATLING_REPORT_JAR}

    - name: Download Gatling simulation-logs from PR CI run
      if: ${{ github.event.workflow_run.event == 'pull_request' }}
      run: |
        cd ${SIMULATION_LOG_DIR}
        gh run download ${REF_RUN_ID} --repo projectnessie/nessie -n gatling-logs

    - name: Download Gatling simulation-logs from the last 20 main CI runs
      if: ${{ github.event.workflow_run.event == 'push' }}
      # TODO this should download the simulation-log for the "current" SHA and the simulation-logs for the preceding commits - not just blindly the most recent N commits
      run: |
        cd ${SIMULATION_LOG_DIR}
        for run_id in $(gh api 'repos/projectnessie/nessie/actions/runs?branch=main&event=push&per_page=50' --jq 'limit(20; .workflow_runs[] | select(.name=="Main CI") | .id)'); do
          gh run download ${run_id} --repo projectnessie/nessie -n gatling-logs || true
        done

    - name: Generate Gatling reports
      # The forked https://github.com/snazy/gatling-report has support to generate "consolidated" reports.
      # It can read logs from different simulations and group those by name and each group will be reported
      # individually. The goal of a combined report (HTML + YAML) is to generate a single HTML/YAML file.
      # If a group has one log, the report shows just the simulation report.
      # If a group has two logs, a diff-report will be generated.
      # If a group has more logs, a trend-report will be generated.
      #
      # TODO pull simulation-logs from latest commit on "main", that has simulation-logs
      run: |
        java -jar ${GATLING_REPORT_JAR} ${SIMULATION_LOG_DIR}/*/simulation.log -o ${REPORT_DIR} -c -n report.html
        java -jar ${GATLING_REPORT_JAR} ${SIMULATION_LOG_DIR}/*/simulation.log -o ${REPORT_DIR} -c -y -f -n report.yaml

    - name: GH Auth
      run: echo ${{ secrets.CI_REPORTS_TOKEN }} | gh auth login --with-token

    - name: Upload reports
      run: |
        gh api -X PUT repos/${CI_REPORTS_REPO}/contents/${WEB_DIR}/report.html -f message="${EVENT} ${BRANCH} ${SHA} Gatling report html" -f content=$(base64 -w0 ${REPORT_DIR}/report.html)
        gh api -X PUT repos/${CI_REPORTS_REPO}/contents/${WEB_DIR}/report.yaml -f message="${EVENT} ${BRANCH} ${SHA} Gatling report yaml" -f content=$(base64 -w0 ${REPORT_DIR}/report.yaml)

    - name: GH Auth
      run: echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token

    - name: Update commit-status
      run: gh api -X POST repos/projectnessie/nessie/statuses/${SHA} -f target_url=${PUBLIC_BASE}/${WEB_DIR}/report.html -f state=success -f context='Gatling Report'
