name: Main CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'LICENSE'
      - 'NOTICE'
      - '*.md'
      - '**/README.md'
      - '.github/dependabot.yml'
      - '.github/workflows/release*.yml'
      - '.github/workflows/check*.yml'
      - '.idea/**'
      - '.editorconfig'

jobs:
  java:
    name: Java/Maven
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_OSSRH_TOKEN
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
    - name: Set up JDK 8
      uses: AdoptOpenJDK/install-jdk@v1
      with:
        version: '8'
        targets: 'JDK8_HOME'
    - name: Update /etc/hosts
      run: echo -e "$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)\t$(hostname -f) $(hostname -s)" | sudo tee -a /etc/hosts
    - name: Set up Maven toolchains.xml
      run: |
          cat << 'EOT' > ${HOME}/.m2/toolchains.xml
          <?xml version="1.0" encoding="UTF8"?>
          <toolchains>
            <toolchain>
              <type>jdk</type>
              <provides>
                <version>11</version>
                <vendor>zulu</vendor>
              </provides>
              <configuration>
                <jdkHome>${env.JAVA_HOME}</jdkHome>
              </configuration>
            </toolchain>
            <toolchain>
              <type>jdk</type>
              <provides>
                <version>1.8</version>
                <vendor>adoptopenjdk</vendor>
              </provides>
              <configuration>
                <jdkHome>${env.JDK8_HOME}</jdkHome>
              </configuration>
            </toolchain>
          </toolchains>
          EOT

    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: |
          ~/.m2/repository
          !~/.m2/repository/org/projectnessie
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Cache local NPM repository
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle
    - name: Build with Maven
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_ACCESS_ID }}
        MAVEN_OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        SPARK_LOCAL_IP: localhost
      if: ${{ env.MAVEN_USERNAME }}
      run: ./mvnw -B deploy --file pom.xml -Pcode-coverage,jdk8-tests,native,release -DdeployAtEnd=true -Dtest.log.level=WARN
    - name: Build with Maven (Fork)
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_ACCESS_ID }}
        SPARK_LOCAL_IP: localhost
      if: ${{ ! env.MAVEN_USERNAME }}
      run: ./mvnw -B install --file pom.xml -Pcode-coverage,jdk8-tests,native -Dtest.log.level=WARN
    - name: Build with Gradle
      run: ./gradlew --rerun-tasks --no-daemon --info build
      working-directory: ./tools/apprunner-gradle-plugin
    - name: Capture test results
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: test-results
        path: |
          **/target/surefire-reports/*
          **/target/failsafe-reports/*
          **/build/reports/*
          **/build/test-results/*
    - name: Capture Gatling simulation logs
      uses: actions/upload-artifact@v2
      with:
        name: gatling-logs
        path: perftest/simulations/target/gatling/*/simulation.log
    - name: Run OWASP Check
      run: |
        ./mvnw dependency-check:aggregate -DskipTests -Powasp-dependency-check
    - name: Upload OWASP Report
      uses: actions/upload-artifact@v2
      with:
        name: owasp-report
        path: |
          target/dependency-check-report.html
    - uses: codecov/codecov-action@v1
      with:
        flags: java
        files: |
          code-coverage/target/site/jacoco-aggregate-all/jacoco.xml
    - name: Push Docker images
      env:
        DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
      if: ${{ env.DOCKER_TOKEN }}
      run: |
          echo '${{ secrets.DOCKER_TOKEN }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin
          docker images --filter 'reference=projectnessie/nessie' --format '{{.ID}}\t{{.Tag}}' |
          while read IMAGE_ID IMAGE_TAG; do
            docker tag "$IMAGE_ID" "projectnessie/nessie-unstable:${IMAGE_TAG%-snapshot}"
            docker push "projectnessie/nessie-unstable:${IMAGE_TAG%-snapshot}"
          done
  jackson-tests:
    name: Jackson Integration Tests
    needs: java
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      # note the big include entry in matrix is used to ensure we get human readable names for the jobs
      matrix:
        include:
          - jackson-version: 2.6.5
            target-library: Hive 2.3.7
            java-version: 11
          - jackson-version: 2.9.5
            target-library: Hive 3.1.2
            java-version: 11
          - jackson-version: 2.6.7
            target-library: Spark 2.4.4
            java-version: 11
          - jackson-version: 2.10.0
            target-library: Spark 3.0.1
            java-version: 11
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java-version }}
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository
            !~/.m2/repository/org/projectnessie
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Jackson Integration Tests ${{ matrix.target-library }}
        run: mvn verify -pl :nessie-client -am -Pjackson-tests -Djackson.test.version=${{ matrix.jackson-version }} -Dtest.log.level=WARN
  python:
    name: Python
    runs-on: ubuntu-latest
    env:
      working-directory: ./python
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions
      working-directory: ${{env.working-directory}}
    - name: Test with tox
      run: tox
      working-directory: ${{env.working-directory}}
    - uses: codecov/codecov-action@v1
      with:
        flags: python
