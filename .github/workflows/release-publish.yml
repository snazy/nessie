# Copyright (C) 2020 Dremio
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Publish Nessie release artifacts

# Triggered when a `nessie-*` tag is being pushed.

# Publishes the Maven, Python, Docker and Gradle-plugin artifacts.

# GitHub environment name:
#   release
# Required secrets:
#   OSSRH_ACCESS_ID
#   OSSRH_TOKEN
#   MAVEN_GPG_PASSPHRASE
#   PYPI_API_TOKEN
#   DOCKER_USERNAME
#   DOCKER_TOKEN
#   GRADLE_PUBLISH_KEY
#   GRADLE_PUBLISH_SECRET

name: Publish release

on:
  push:
    tags:
      - nessie-*

  workflow_dispatch:
    inputs:
      releaseTag:
        description: 'Release tag name to re-release'
        required: true

jobs:
  publish-release:
    name: Publish release
    runs-on: ubuntu-latest

    # Runs in the `release` environment, which has the necessary secrets and defines the reviewers.
    # See https://docs.github.com/en/actions/reference/environments
    environment: release

    steps:

    # GH doesn't provide just the tag name, so this step strips `/refs/tags/nessie-` from `GITHUB_REF`
    # and provides the output `VERSION` or, in case of a manual run, uses the input `releaseTag` as
    # the input tag name.
    - name: Get release version
      id: get_version
      run: |
        if [[ "${{ github.event_name }}" == "push" ]] ; then
          V="${GITHUB_REF/refs\/tags\/}"
        else
          V="${{ github.event.inputs.releaseTag }}"
        fi
        # check if tag matches patterns like nessie-0.5, nessie-0.10.4.3-alpha1, etc
        if [[ ${V} =~ ^nessie-[0-9]+[.][0-9.]*[0-9](-[a-zA-Z0-9]+)?$ ]]; then
          echo ::set-output name=VERSION::${V/nessie-}
        else
          echo "Tag must start with nessie- followed by a valid version (got tag ${V}, ref is ${GITHUB_REF} )"
          exit 1
        fi

    ### BEGIN runner setup
    - name: Checkout
      uses: actions/checkout@v3
      if: ${{ github.event_name == 'push' }}
      with:
        fetch-depth: '0'
    - name: Checkout
      uses: actions/checkout@v3
      if: ${{ github.event_name == 'workflow_dispatch' }}
      with:
        fetch-depth: '0'
        ref: refs/tags/${{ github.event.inputs.releaseTag }}
    - name: Setup runner
      uses: ./.github/actions/setup-runner
      with:
        more-memory: 'true'
    - name: Setup Java
      uses: ./.github/actions/dev-tool-java
      with:
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
    - name: Setup Python
      uses: ./.github/actions/dev-tool-python
      with:
        python-version: '3.8'
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r python/requirements_dev.txt
    ### END runner setup

    # Deploys Maven artifacts. Build and test steps were already ran in previous steps.
    # Not running tests, because the environment contains secrets.
    - name: Publish Maven artifacts for release
      id: build_maven
      env:
        RELEASE_VERSION: ${{ steps.get_version.outputs.VERSION }}
        ORG_GRADLE_PROJECT_signingKey: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
        ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.OSSRH_ACCESS_ID }}
        ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.OSSRH_TOKEN }}
      run: |
        ./gradlew --no-watch-fs --no-daemon --info publishToMavenLocal publishToSonatype closeAndReleaseSonatypeStagingRepository -Prelease -Puber-jar

        # Build the native-image, it's not released to Maven Central
        ./gradlew --no-watch-fs --no-daemon --info :servers:quarkus-server:quarkusBuild -Prelease -Pnative -Pdocker

        # Add version to the openapi file name
        cp model/build/resources/main/META-INF/openapi/openapi.yaml model/build/nessie-openapi-${RELEASE_VERSION}.yaml

        echo ::set-output name=QUARKUS_NATIVE_BINARY::servers/quarkus-server/build/nessie-quarkus-${RELEASE_VERSION}-runner
        echo ::set-output name=QUARKUS_UBER_JAR::servers/quarkus-server/build/nessie-quarkus-${RELEASE_VERSION}-runner.jar
        echo ::set-output name=CLI_UBER_JAR::servers/quarkus-cli/build/nessie-quarkus-cli-${RELEASE_VERSION}-runner.jar
        echo ::set-output name=NESSIE_OPENAPI::model/build/nessie-openapi-${RELEASE_VERSION}.yaml

    - name: Install Helm
      uses: azure/setup-helm@v1
      with:
        version: v3.6.3

      # Packages Nessie Helm chart
    - name: Package Nessie Helm chart for release
      env:
        RELEASE_VERSION: ${{ steps.get_version.outputs.VERSION }}
      run: |
        helm package helm/nessie --version ${RELEASE_VERSION}

      # Rename Nessie Helm chart
    - name: Rename Nessie Helm chart for release
      id: nessie_helm
      env:
        RELEASE_VERSION: ${{ steps.get_version.outputs.VERSION }}
      run: |
        mv nessie-${RELEASE_VERSION}.tgz nessie-helm-${RELEASE_VERSION}.tgz
        echo ::set-output name=NESSIE_HELM_CHART::nessie-helm-${RELEASE_VERSION}.tgz

    # Publish Nessie Helm chart to Helm Repo
    - name: Publish Nessie Helm chart to Helm Repo
      env:
        RELEASE_VERSION: ${{ steps.get_version.outputs.VERSION }}
      run: |
        wget https://raw.githubusercontent.com/projectnessie/charts.projectnessie.org/main/index.yaml
        helm repo index . --merge index.yaml --url https://github.com/projectnessie/nessie/releases/download/nessie-${RELEASE_VERSION}
        echo ${{ secrets.CI_REPORTS_TOKEN }} | gh auth login --with-token
        index_sha=$(gh api -X GET /repos/projectnessie/charts.projectnessie.org/contents/index.yaml --jq '.sha')
        gh api -X PUT /repos/projectnessie/charts.projectnessie.org/contents/index.yaml -f message="Publishing Nessie Helm chart ${RELEASE_VERSION}" -f content=$(base64 -w0 index.yaml) -f sha=${index_sha} || true


    # Deploys pynessie. Build and test steps were already ran in previous steps
    - name: Build pynessie for release
      working-directory: ./python
      run: python setup.py sdist bdist_wheel

    - name: Publish pynessie package
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: ./python/dist/

    # Deploys Docker images. Build and test steps were already ran in previous workflows
    - name: Tag Docker image for release
      env:
        RELEASE_VERSION: ${{ steps.get_version.outputs.VERSION }}
      run: |
        docker tag projectnessie/nessie:${RELEASE_VERSION} projectnessie/nessie:latest

    # Deploys Docker images. Build and test steps were already ran in previous workflows
    - name: Publish Docker image for release
      env:
        RELEASE_VERSION: ${{ steps.get_version.outputs.VERSION }}
      run: |
        echo '${{ secrets.DOCKER_TOKEN }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin
        docker push projectnessie/nessie:${RELEASE_VERSION} && docker push projectnessie/nessie:latest

    # Prepare Nessie release notes for GitHub
    #
    # The markdown file for the release is generated using some mostly simple shell script.
    #
    # `LAST_TAG` is evaluated using `git describe`, which is the name of the git tag before the release tag
    # `NUM_COMMITS` is the total number of commits "between" LAST_TAG and GIT_TAG
    #
    # Release highlights are extracted from `site/docs/try/releases.md`, highlights for the current
    # release is the text between the first two lines starting with `## ` in `releases.md`.
    #
    # "Full Changelog" is the output of a `git log` considering the commits "between" LAST_TAG and
    # GIT_TAG, removing the commits by `dependabot-preview` and `nessie-release-workflow`.
    # Also removes commits that start with `[release] `.
    #
    # The final markdown is just a `cat` of the above information including some basic markdown formatting.
    #
    - name: Prepare Nessie release in GitHub
      id: prep_release
      env:
        RELEASE_VERSION: ${{ steps.get_version.outputs.VERSION }}
        GIT_TAG: nessie-${{ steps.get_version.outputs.VERSION }}
      run: |
        DIR=$(mktemp -d)
        NOTES_FILE=${DIR}/release-notes.md
        LAST_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1))
        NUM_COMMITS=$(git log --format='format:%h' ${LAST_TAG}..HEAD | wc -l)

        csplit site/docs/try/releases.md '%##%' {0} '/##/' {0} '%##%' {*} -f ${DIR}/release-highlights -b '-%d.txt' > /dev/null

        git log --perl-regexp --author '^(?!.*dependabot(-preview)?|.*nessie-release-workflow).*$' --format='format:* %s' ${LAST_TAG}..${GIT_TAG} | grep -v '^\* \[release\] .*$' > ${DIR}/release-log

        Q_NATIVE_URL="https://github.com/projectnessie/nessie/releases/download/nessie-${RELEASE_VERSION}/nessie-quarkus-${RELEASE_VERSION}-runner"
        Q_UBER_URL="https://github.com/projectnessie/nessie/releases/download/nessie-${RELEASE_VERSION}/nessie-quarkus-${RELEASE_VERSION}-runner.jar"
        Q_MC_URL="https://search.maven.org/search?q=g:org.projectnessie+AND+a:nessie-quarkus+AND+v:${RELEASE_VERSION}"
        Q_HELM_CHART_URL="https://github.com/projectnessie/nessie/releases/download/nessie-${RELEASE_VERSION}/nessie-helm-${RELEASE_VERSION}.tgz"

        cat <<EOF > ${DIR}/release-notes.md
        # Highlights

        * ${NUM_COMMITS} commits since ${LAST_TAG#nessie-}
        $(cat ${DIR}/release-highlights* | grep -v '^[#][#] .*$' | grep -v '^$' | sed 's/^(.*)$/* $1/')
        * Maven Central: https://search.maven.org/search?q=g:org.projectnessie
        * Docker Hub: https://hub.docker.com/r/projectnessie/nessie
        * PyPI: https://pypi.org/project/pynessie/
        * Helm Chart repo: https://charts.projectnessie.org/

        ## Try it

        The attached executable file [\`nessie-quarkus-${RELEASE_VERSION}-runner\`](${Q_NATIVE_URL}) is a x86-64 native binary image and only works on compatible Linux environments.

        The attached [\`nessie-quarkus-${RELEASE_VERSION}-runner.jar\`](${Q_UBER_URL}) is a standalone uber-jar file that runs on Java 11 or newer and it is also available via [Maven Central](${Q_MC_URL}). Download and run it (requires Java 11):
        \`\`\`
        wget https://github.com/projectnessie/nessie/releases/download/nessie-${RELEASE_VERSION}/nessie-quarkus-${RELEASE_VERSION}-runner.jar
        java -jar nessie-quarkus-${RELEASE_VERSION}-runner.jar
        \`\`\`

        The attached [\`nessie-helm-${RELEASE_VERSION}.tgz\`](${Q_HELM_CHART_URL}) is a packaged Helm chart, which can be downloaded and installed via Helm.
        There is also the [Nessie Helm chart repo](https://charts.projectnessie.org/), which can be added and used to install the Nessie Helm chart.

        ## Full Changelog (minus dependabot commits):

        $(cat ${DIR}/release-log)
        EOF

        echo ::set-output name=NOTES_FILE::${NOTES_FILE}

    - name: Dump release notes
      run: cat ${{ steps.prep_release.outputs.NOTES_FILE }}

    - name: Create Nessie release in GitHub
      env:
        RELEASE_VERSION: ${{ steps.get_version.outputs.VERSION }}
        GIT_TAG: nessie-${{ steps.get_version.outputs.VERSION }}
      run: |
        QUARKUS_NATIVE_BINARY="${{ steps.build_maven.outputs.QUARKUS_NATIVE_BINARY }}"
        QUARKUS_UBER_JAR="${{ steps.build_maven.outputs.QUARKUS_UBER_JAR }}"
        CLI_UBER_JAR="${{ steps.build_maven.outputs.CLI_UBER_JAR }}"
        NESSIE_OPENAPI="${{ steps.build_maven.outputs.NESSIE_OPENAPI }}"
        NESSIE_HELM_CHART="${{ steps.nessie_helm.outputs.NESSIE_HELM_CHART }}"
        echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
        gh release create ${GIT_TAG} \
          --notes-file ${{ steps.prep_release.outputs.NOTES_FILE }} \
          --title "Nessie ${RELEASE_VERSION}" \
          "${QUARKUS_NATIVE_BINARY}" \
          "${QUARKUS_UBER_JAR}" \
          "${CLI_UBER_JAR}" \
          "${NESSIE_OPENAPI}" \
          "${NESSIE_HELM_CHART}"

    - name: Update SwaggerHub
      uses: smartbear/swaggerhub-cli@v0.6.1
      env:
        XDG_CONFIG_HOME: "/tmp"
        SWAGGERHUB_API_KEY: ${{ secrets.SWAGGERHUB_API_KEY }}
        SWAGGERHUB_URL: "https://api.swaggerhub.com"
      with:
        args: api:create projectnessie/nessie -f ${{ steps.build_maven.outputs.NESSIE_OPENAPI }} --published=publish --setdefault --visibility=public
