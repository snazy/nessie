# Copyright (C) 2020 Dremio
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# Projectnessie GitHub Release workflow

# Manually triggered workflow, takes the "release-version" and "next-version" arguments.

# This workflow creates the git commits + git tag for a Nessie release.
# It requires a fully successful CI status of the commit going to be released, i.e. we rely on
# the "Main CI" workflow here.

# When this workflow pushes the release tag (e.g. `nessie-0.5.1`), the `release-publish.yml`
# workflow publishes the release artifacts

# Projectnessie really prefers a linear git history - aka no merges. PRs must not be merged
# while the release workflow runs. In case the git history would not be linear, this workflow will
# fail without having uploaded/pushed any release artifacts.

# Secrets:
#   NESSIE_BUILDER  GH access-token to push the release-commits+tag to the branch,
#                   bypassing the required commit-hooks + review.

name: Create Release

on:
  # Manually triggered
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: 'The version to release - e.g. `0.5.0`'
        required: true

jobs:
  create-release:
    name: Create release
    runs-on: ubuntu-latest
    env:
      GIT_TAG: nessie-${{ github.event.inputs.releaseVersion }}
      RELEASE_VERSION: ${{ github.event.inputs.releaseVersion }}

    steps:

    # Check the given version parameter strings for valid version patterns and inequality.
    - name: Check parameters
      run: |
        # check if tag matches patterns like nessie-0.5, nessie-0.10.4.3-alpha1, etc
        if [[ ${RELEASE_VERSION} =~ ^[0-9]+[.][0-9.]*[0-9](-[a-zA-Z0-9]+)?$ ]]; then
          echo "Parameter check OK"
        else
          echo "RELEASE_VERSION is not a valid release version ref is ${GITHUB_REF}."
          exit 1
        fi

    # Check that the commit that is becoming a release has passed CI.
    # Note: intentionally hard-coded projectnessie/nessie, so this check even works when *testing*
    # the workflow on a PR-branch.
    - name: Check commit status
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
        gh api repos/projectnessie/nessie/commits/${GITHUB_SHA}/check-runs --jq 'if ([.check_runs[] | select(.name | endswith(" release") or startswith("Dependabot ") or startswith("codecov/") or startswith("Report ") | not ) | select(.conclusion != "skipped") | .conclusion // "pending" ] | unique == ["success"]) then "OK" else error("Commit checks are not OK") end'

    ### BEGIN runner setup
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Java, Maven
      uses: ./.github/actions/dev-tool-java
    - name: Setup Python
      uses: ./.github/actions/dev-tool-python
      with:
        python-version: '3.8'
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bump2version
        # Remove the following, once https://github.com/c4urself/bump2version/issues/214 is fixed
        # and the two workarounds below are removed.
        pip install -r python/requirements.txt
    ### END runner setup

    # Two steps that verify that the HISTORY.rst, server-upgrade.md and releases.md files contain
    # information about the release
    - name: Check release version number in text files
      run: |
        FAILS=""
        VERSION_PATTERH="$(echo ${RELEASE_VERSION} | sed 's/\./\\./g' )"
        grep -q "^${VERSION_PATTERH} [(][0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][)]$" < python/HISTORY.rst || FAILS="${FAILS} python/HISTORY.rst"
        grep -q "^## ${VERSION_PATTERH} Release [(][A-Z][a-z]* [0-9][0-9]*, [0-9][0-9][0-9][0-9][)]$" < site/docs/try/releases.md || FAILS="${FAILS} site/docs/try/releases.md"
        grep -q " ${VERSION_PATTERH} " < site/docs/try/server-upgrade.md || FAILS="${FAILS} site/docs/try/server-upgrade.md"
        grep -q "^| ${VERSION_PATTERH} .*check_mark.*$" < SECURITY.md || FAILS="${FAILS} SECURITY.md"
        if [[ -n ${FAILS} ]] ; then
          echo ${FAILS} "do not contain the release version ${RELEASE_VERSION}."
          exit 1
        fi

    - name: Bump Python release version ${{ github.event.inputs.releaseVersion }}
      working-directory: ./python
      run: |
        # bump2version 1.0.1 has a bug: https://github.com/c4urself/bump2version/issues/214
        if [[ "$(cd python/ ; python -c 'import pynessie; print(pynessie.__version__)')" != ${RELEASE_VERSION} ]] ; then
          bump2version --no-commit --no-tag --new-version ${RELEASE_VERSION} minor
          # Call into pynessie to ensure bump2version didn't mess up anything
          echo "pynessie at release-version $(python -c 'import pynessie; print(pynessie.__version__)')"
        else
          echo "pynessie already at release-version ${RELEASE_VERSION}"
        fi

    - name: Bump versions in site/ to ${{ github.event.inputs.releaseVersion }}
      working-directory: ./site
      run: |
        cp mkdocs.yml /tmp/nessie-mkdocs.yml
        cat /tmp/nessie-mkdocs.yml | sed "s/^    java: [0-9.]*$/    java: ${RELEASE_VERSION}/" | sed "s/^    python: v[0-9.]*$/    python: v${RELEASE_VERSION}/"> mkdocs.yml

    - name: Bump version in helm/nessie to ${{ github.event.inputs.releaseVersion }}
      working-directory: ./helm/nessie
      run: |
        cp Chart.yaml /tmp/nessie-Chart.yaml
        cat /tmp/nessie-Chart.yaml | sed "s/^version: [0-9.]*$/version: ${RELEASE_VERSION}/" > Chart.yaml

    - name: Bump UI release version ${{ github.event.inputs.releaseVersion }}
      working-directory: ./ui
      run: |
        cp package.json /tmp/nessie-ui-package.json
        cp package-lock.json /tmp/nessie-ui-package-lock.json
        cat /tmp/nessie-ui-package.json | jq ".version = \"${RELEASE_VERSION}\"" > package.json
        cat /tmp/nessie-ui-package-lock.json | jq ".version = \"${RELEASE_VERSION}\" | .packages[\"\"].version = \"${RELEASE_VERSION}\"" > package-lock.json

    - name: Bump to release version ${{ github.event.inputs.releaseVersion }}
      run: echo "${RELEASE_VERSION}" > version.txt

    - name: Configure release-bot-user in git config
      run: |
        git config --global user.email "nessie-release-workflow-noreply@projectnessie.org"
        git config --global user.name "Nessie Release Workflow [bot]"

    # Record the release-version in git and add the git tag for the release.
    - name: Record ${{ github.event.inputs.releaseVersion }} release in git
      run: |
        git commit -a -m "[release] release nessie-${RELEASE_VERSION}"
        git tag -f ${GIT_TAG}

    # Update versions to next development iteration, use bump2version as the "source of truth" here
    - name: Set Python to next development version version
      id: next_version
      working-directory: ./python
      run: |
        bump2version --no-commit --no-tag patch
        # Call into pynessie to ensure bump2version didn't mess up anything. See https://github.com/c4urself/bump2version/issues/214
        NEXT_VERSION="$(python -c 'import pynessie; print(pynessie.__version__)')"
        echo "pynessie at next development iteration ${NEXT_VERSION}"
        echo ::set-output name=NEXT_VERSION::${NEXT_VERSION}

    # Update ui-version to next development iteration
    - name: Bump UI to next development version
      working-directory: ./ui
      env:
        NEXT_UI_VERSION: ${{ steps.next_version.outputs.NEXT_VERSION }}-snapshot
      run: |
        cp package.json /tmp/nessie-ui-package.json
        cp package-lock.json /tmp/nessie-ui-package-lock.json
        cat /tmp/nessie-ui-package.json | jq ".version = \"${NEXT_UI_VERSION}\"" > package.json
        cat /tmp/nessie-ui-package-lock.json | jq ".version = \"${NEXT_UI_VERSION}\" | .packages[\"\"].version = \"${NEXT_UI_VERSION}\"" > package-lock.json

    # Update versions in pom's to next development iteration
    - name: Bump to next development version version
      env:
        NEXT_VERSION: ${{ steps.next_version.outputs.NEXT_VERSION }}
      run: echo "${NEXT_VERSION}-SNAPSHOT" > version.txt

    # Record the next development iteration in git
    - name: Record next development version in git
      run: git commit -a -m "[release] next development iteration"

    # Push the 2 git commits and git tag. If this one fails, some other commit was pushed to the
    # 'main' branch and break the linear history for the Nessie git repo.
    # The `release-publish.yml` job will run when the release tag `nessie-x.y.z` has been pushed.
    - name: Push tag + branch
      run: |
        # Push directly using the remote repo URL, which includes the secret so this job can push to the repo
        UPSTREAM="https://${{ secrets.NESSIE_BUILDER }}@github.com/${GITHUB_REPOSITORY}.git"

        # Move the default auth settings in ~/.gitconfig out of the way, so the git-push can use the token
        git config --rename-section http.https://github.com/ http.https://save.github.com/

        git push --no-verify "${UPSTREAM}" HEAD:${GITHUB_REF} ${GIT_TAG}

        # Move the default auth settings in ~/.gitconfig back
        git config --rename-section http.https://save.github.com/ http.https://github.com/
